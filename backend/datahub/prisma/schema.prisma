generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

model Manager {
    id              String    @id @default(uuid())
    email           String    @unique
    password        String
    name            String
    image           String?
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt
    isAdmin         Boolean   @default(false)
    deletedAt       DateTime?
    deletedBy       Manager?  @relation("ManagerDeletedBy", fields: [deletedById], references: [id])
    deletedById     String?
    deletedManagers Manager[] @relation("ManagerDeletedBy")
    events          Event[]
    reports         Report[]
    drivers         Driver[]
    cars            Car[]
    deletedCars     Car[]     @relation("DeletedBy")
    deletedDrivers  Driver[]  @relation("DeletedBy")
    deletedEvents   Event[]   @relation("DeletedBy")
}

model Driver {
    id          String    @id @default(uuid())
    name        String
    phone       String
    image       String?
    license     String    @unique
    isAvailable Boolean   @default(true)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    deletedAt   DateTime?
    manager     Manager   @relation(fields: [managerId], references: [id])
    managerId   String
    deletedBy   Manager?  @relation("DeletedBy", fields: [deletedById], references: [id])
    deletedById String?
    events      Event[]
    reports     Report[]
}

model Car {
    id          String    @id @default(uuid())
    renavam     String    @unique
    chassis     String    @unique
    plate       String    @unique
    brand       String
    model       String
    year        Int
    image       String?
    color       String
    odometer    Int       @default(0)
    status      CarStatus @default(AVAILABLE)
    isAvailable Boolean   @default(true)
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
    deletedAt   DateTime?
    manager     Manager   @relation(fields: [managerId], references: [id])
    managerId   String
    deletedBy   Manager?  @relation("DeletedBy", fields: [deletedById], references: [id])
    deletedById String?
    events      Event[]
    reports     Report[]
}

model Event {
    id          String      @id @default(uuid())
    eventType   EventType
    odometer    Int
    isActive    Boolean     @default(true)
    status      EventStatus @default(PENDING)
    createdAt   DateTime    @default(now())
    endedAt     DateTime?
    deletedAt   DateTime?
    manager     Manager     @relation(fields: [managerId], references: [id])
    managerId   String
    deletedBy   Manager?    @relation("DeletedBy", fields: [deletedById], references: [id])
    deletedById String?
    driver      Driver      @relation(fields: [driverId], references: [id])
    driverId    String
    car         Car         @relation(fields: [carId], references: [id])
    carId       String

    checkoutEventId       String? @unique
    originalCheckoutEvent Event?  @relation("RelatedEvents", fields: [checkoutEventId], references: [id])
    returnedEvent         Event?  @relation("RelatedEvents")
}

model Report {
    id        String    @id @default(uuid())
    manager   Manager   @relation(fields: [managerId], references: [id])
    managerId String
    driver    Driver    @relation(fields: [driverId], references: [id])
    driverId  String
    car       Car       @relation(fields: [carId], references: [id])
    carId     String
    eventType EventType
    startDate DateTime
    endDate   DateTime
    createdAt DateTime  @default(now())
}

enum EventType {
    CHECKOUT
    RETURN
    REPAIR
    REPAIR_RETURN
}

enum CarStatus {
    AVAILABLE
    IN_USE
    IN_REPAIR
}

enum EventStatus {
    PENDING
    ACTIVE
    COMPLETED
    CANCELLED
}
